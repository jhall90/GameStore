@page "/editgame"
@page "/editgame/{id:int}"
@* @page "/editgame/{id:int}" adds strict type to the id so we are not sent non ints *@
@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject GamesClient GamesClient
@inject GenresClient GenresClient

<PageTitle>@title</PageTitle>
<div class="row">
    <h3 class="col-md-6 offset-3">@title</h3>
</div>

@if (genres is null || game is null) 
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-6 offset-3">
            <EditForm Model="@game" FormName="editGame" OnValidSubmit="HandleSubmit">
                @* 
                    <DataAnnotationsValidator /> is used in conjunction with OnValidSubmit to allow client side validation in the modal 
                    <ValidationSummary /> will list all validation errors which can be useful if we had way more inputs to check ex:50 inputs
                *@
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="game.Name" class="form-control" />
                    <ValidationMessage For="() => game.Name"/> 
                    @*
                        For="() => _____" can also be written as For=@(() => _____)
                        replacing the "" with @()
                    *@
                </div>
                <div class="mb-3">
                    <label for="genre" class="form-label">Genre:</label>
                    <InputSelect id="genre" @bind-Value="game.GenreId" class="form-select">
                        <option value="">Select a Genre</option>
                        @foreach (var genre in genres)
                        {
                            <option value="@genre.Id">@genre.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For=@(() => game.GenreId)/>
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Price:</label>
                    <InputNumber id="price" @bind-Value="game.Price" class="form-control" />
                    <ValidationMessage For="() => game.Price"/>
                </div>
                <div class="mb-3">
                    <label for="releaseDate" class="form-label">Release Date:</label>
                    <InputDate id="releaseDate" @bind-Value="game.ReleaseDate" class="form-control" />
                </div> 
                <button type="submit" class="btn btn-primary">Save Game</button>
                <a role="button" class="btn btn-secondary" href="/">Cancel</a>

            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    // parameter for the url incase a game id is sent in
    public int? Id { get; set; }

    [SupplyParameterFromForm] 
    // This tells blazor it should take all the parameters from the form
    // It will populate the game method below with the form inputs
    private GameDetails? game { get; set; }

    private Genre[]? genres;
    private string title = string.Empty;

    protected override void OnParametersSet() 
    {
        //This is invocted when the user first arrives and when the user submits the data
            // happens before HandleSubmit() which would destroy the user data if we dont have this check for it
        if (game is not null )
        {
            return;
        }

        //Determine if an id is passed in and if we need to get game details or display an empty game to add
        if (Id is not null)
        {
            game = GamesClient.GetGame(Id.Value);
            title = $" Edit - {game.Name}";
        }
        else
        {
            game = new()
            {
                Name = string.Empty,
                ReleaseDate = DateOnly.FromDateTime(DateTime.UtcNow)
            };
            title = "New Game";
        }
    }

    protected override void OnInitialized() 
    {
        genres = GenresClient.GetGenres();
    }

    private void  HandleSubmit()
    {
        ArgumentNullException.ThrowIfNull(game);

        if (Id is null)
        {
            GamesClient.AddGame(game); 
        }
        else
        {
            game.Id = Id.Value;
            GamesClient.UpdateGame(game);
        }

        NavigationManager.NavigateTo("/"); 
    }
}
